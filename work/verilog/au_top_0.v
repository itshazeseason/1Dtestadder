/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg trig;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [1-1:0] M_button_out;
  reg [1-1:0] M_button_in;
  button_conditioner_2 button (
    .clk(clk),
    .in(M_button_in),
    .out(M_button_out)
  );
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  
  wire [7-1:0] M_tester_seg;
  wire [4-1:0] M_tester_sel;
  wire [3-1:0] M_tester_testvec;
  reg [1-1:0] M_tester_trig;
  reg [2-1:0] M_tester_testresult;
  addertester_4 tester (
    .clk(clk),
    .rst(rst),
    .trig(M_tester_trig),
    .testresult(M_tester_testresult),
    .seg(M_tester_seg),
    .sel(M_tester_sel),
    .testvec(M_tester_testvec)
  );
  
  wire [8-1:0] M_displed2_out;
  reg [3-1:0] M_displed2_in;
  decoder_5 displed2 (
    .in(M_displed2_in),
    .out(M_displed2_out)
  );
  
  wire [1-1:0] M_adder_s;
  wire [1-1:0] M_adder_cout;
  reg [1-1:0] M_adder_a;
  reg [1-1:0] M_adder_b;
  reg [1-1:0] M_adder_cin;
  full_adder_6 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .cin(M_adder_cin),
    .s(M_adder_s),
    .cout(M_adder_cout)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    usb_tx = usb_rx;
    io_led = 24'h000000;
    io_led = io_dip;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_button_in = io_button[0+0-:1] | io_button[1+0-:1] | io_button[2+0-:1] | io_button[3+0-:1] | io_button[4+0-:1];
    M_edge_detector_in = M_button_out;
    trig = M_edge_detector_out;
    io_seg = ~M_tester_seg;
    io_sel = ~M_tester_sel;
    M_adder_a = M_tester_testvec[2+0-:1];
    M_adder_b = M_tester_testvec[1+0-:1];
    M_adder_cin = M_tester_testvec[0+0-:1];
    M_tester_testresult[1+0-:1] = io_dip[0+1+0-:1];
    M_tester_testresult[0+0-:1] = io_dip[0+0+0-:1];
    M_tester_trig = trig;
    M_displed2_in = M_tester_testvec;
    io_led[16+7-:8] = M_displed2_out;
    io_led[8+0+2-:3] = M_tester_testvec;
    io_led[0+1+0-:1] = M_adder_s;
    io_led[0+0+0-:1] = M_adder_cout;
  end
endmodule
